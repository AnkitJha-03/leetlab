// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // realtionship
  problems      Problem[]
  submissions   Submission[]
  problemSolved ProblemSolved[]
  sheets        Sheet[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  constraints Json
  hints       String?
  editorial   String?

  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationship
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions        Submission[]
  solvedBy           ProblemSolved[]
  problemInPlaylists ProblemInSheet[]
}

model Submission {
  id             String   @id @default(uuid())
  userId         String
  problemId      String
  sourceCode     Json
  language       String
  stdin          String?
  stdout         String?
  stderr         String?
  status         String
  compiledOutput String?
  time           String?
  memory         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // relstionship
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testcases TestCaseResult[]
}

model TestCaseResult {
  id             String   @id @default(uuid())
  submissionId   String
  testCase       Int
  passed         Boolean
  stdout         String?
  expected       String
  stderr         String?
  status         String
  compiledOutput String?
  time           String?
  memory         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // relationship
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationship
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Sheet {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relationship
  problems ProblemInSheet[]
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model ProblemInSheet {
  id        String   @id @default(uuid())
  sheetId   String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationship
  sheet   Sheet   @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([sheetId, problemId])
}
